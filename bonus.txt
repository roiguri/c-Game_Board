# Bonus for exercise 3:

## Web-Based UI Server

A self-contained web interface for the Tank Simulator providing browser-based configuration and real-time simulation execution.

### Functionality
- **Mode Support**: Basic, Comparative, and Competition simulation modes with custom result displays
- **Real-Time Execution**: Live console output streaming with auto-scroll and manual controls
- **Interactive Configuration**: Dynamic form controls with file path validation and configuration summary
- **Professional Results Display**: Parsed results with leaderboards, and board visualization

### Architecture
- **Backend**: C++ HTTP server using cpp-httplib for REST API endpoints
- **Process Management**: Simple popen()-based execution with output capture and error handling
- **Frontend**: Vanilla HTML5/CSS3/JavaScript with modern design and responsive layout
- **API Design**: RESTful endpoints for simulation control, output polling, and result retrieval
- **Build Integration**: CMake-managed dependencies with optional UI compilation flag

### Usage

Build with UI enabled:
```bash
cd build
cmake -DENABLE_UI=ON ..
make tank_simulator_ui
```

Run the server:
```bash
./tank_simulator_ui
```

Access via browser: http://localhost:8080

## Basic Mode Implementation

The Basic Mode provides single-game execution with immediate feedback through the web interface:

### Features
- **Single Game Execution**: Run one simulation with specified game map, game manager, and two algorithms
- **Real-Time Output**: Console output streams directly to the browser with live updates
- **Error Handling**: Clear error messages for missing files or invalid configurations
- **Direct Results**: Immediate game results displayed in the console output area

## Unit Testing and Development Helpers

### Enhanced Isolated Testing Framework
Building upon the existing basic tests, this project implements a comprehensive isolated testing system using Google Test framework with strict component separation:

### Component-Specific Testing with Mock Dependencies
Each directory maintains complete isolation and cannot depend on other project components:

- **UserCommon Library**: Enhanced with mock game state generators and isolated utility testing
- **Algorithm Testing**: Complete mock game environment simulation without requiring actual GameManager or Simulator
- **Game Manager Testing**: Mock algorithm implementations and isolated game logic validation using simulated tank behaviors
- **Simulator Testing**: Mock-based end-to-end testing using simulated algorithms and game managers

### Advanced Test Helpers and Utilities (New Additions)
- **Mock Factories**: **NEW** - Self-contained mock objects that simulate cross-component interactions without dependencies
- **Scenario Builders**: **NEW** - Isolated complex game state setup using only local mocks and test data

### Build and Execution
```bash
# Build with testing enabled
cmake -DENABLE_TESTING=ON ..
make

# Run specific test suites
./tests/usercommon_tests
./tests/algorithm_tests
./tests/GameManager_tests
./tests/Simulator_tests
```
