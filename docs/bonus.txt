Visualization System

- HTML-based game visualization with interactive playback
- Step-by-step replay of the entire game with animation controls
- Displays a description of chosen actions.
- Displays tank positions, directions, shells, mines, walls, and wall health
- Shows player stats (shells remaining, active/destroyed status)
- Supports countdown timer display
* Besides the specific html visualizer we create a visualiztion manager to 
  create a consistent API for integration with other visualizers in the future.
  (We plan to add more in the future/share visualizers with other students).

*The visualizer class was designed and implemented with the help of AI chatbots

*Instructions to run:*

Visualization:

  Build the project with:
    mkdir build && cd build
    cmake -DENABLE_VISUALIZATION=ON ..
    make

  Then Run:
    ./tanks_game <input_file>
  
  # Visualization HTML generated as output_<input_file>_visualization.html
  # Open in any browser to view the interactive game replay

Google Test Framework Integration

Tests for all components: GameBoard, Tank, Shell, Algorithms, Collision, Etc
Edge case testing for board wrapping, collisions, and game rules
Mock objects for testing algorithmic behavior in isolation
Test fixtures for complex test scenarios
* Configuration of gtest enviroment was done with AI

*Instructions to run:*

Tests:

  Build the project with:
    mkdir build && cd build
    cmake -DENABLE_TESTING=ON ..
    make

  Run tests with:
    ./bin/tests/tanks_game_tests

Board Generator

The game includes a random board generator with the following features:
- Generate boards with customizable dimensions, wall density, and mine density
- Support for symmetrical boards (horizontal, vertical, diagonal)
- Reproducible generation using seed values
- Validation to ensure playable boards
  - Configuration values are in a certain range.
  - Both tanks are placed.
  - Minimum distance between tanks.
  - A path exists between the tanks.

*Instructions to run:*

- Does not require a special build.

Generate a board without running the game:

./tanks_game --only_generate [--config-path=<path>]

Generate a board and immediately run the game with generated board:

./tanks_game --run_generated [--config-path=<path>]

When running the generator without the --config-path flag, default values are
used.

*Configuration file format:*

dimensions: <width> <height>
wall_density: <0.0-0.9>
mine_density: <0.0-0.5>
symmetry: <none|horizontal|vertical|diagonal>
seed: <number> (remove field for random boards)
max_steps: <number> (optional, default 1000)
num_shells: <number> (optional, default 10)
map_name: <string> (optional, default "Generated Map")

*Output board file format:*
- Line 1: Map name/description
- Line 2: MaxSteps = <NUM>
- Line 3: NumShells = <NUM>
- Line 4: Rows = <NUM>
- Line 5: Cols = <NUM>
- Then: <Rows> lines of board content (each line Cols characters)

* Requires txt file extension
* Example config file with default values in project files